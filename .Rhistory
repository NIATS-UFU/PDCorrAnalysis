x = plotData[, 1],
y = plotData[, 2],
color = factor(m1$xm@knownLabels)
))
g <- g +  theme_light(base_size = 25)
g <- g + theme(legend.position = "right",
legend.key.size = unit(2, 'lines'))
g <- g + ggtitle(clinicalScale)
g <- g + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.1, 0.95),
legend.justification = c("left", "top"),
legend.title = element_blank(),
legend.direction = "horizontal",
legend.text = textconf,
axis.text.x = textconf,
axis.text.y = textconf,
axis.title.x = textconf,
axis.title.y = textconf
)
g <-
g +  scale_color_manual(labels = c("Postural", "Rest"),
values = c("#999999", "#E69F00"))
g <- g +  xlab(paste("r ", "(", feat1, ")", sep = ""))
g <- g +  ylab(paste("r ", "(", feat2, ")", sep = ""))
plotDataEl1 <- as.data.frame(m1$e1$r_ellipse)
g <- g + geom_path(data = plotDataEl1,
aes(x = plotDataEl1[, 1], y = plotDataEl1[, 2]))
plotDataEl2 <- as.data.frame(m1$e2$r_ellipse)
g <- g + geom_path(data = plotDataEl2,
aes(x = plotDataEl2[, 1], y = plotDataEl2[, 2]))
dfPlotMean <- as.data.frame(m1$xm@bestResult@parameters@mean)
g <-  g + geom_point(data = dfPlotMean,
size = psize,
aes(x = V1, y = V2),
shape = 15)
g <- g + xlim(xl)
g <- g + ylim(yl)
if (plotEigenc == TRUE)
{
df <- data.frame(
x1 = m1$e1$X0,
x2 = m1$e1$largest_eigenvec[1] * sqrt(m1$e1$largest_eigenval),
y1 = m1$e1$Y0,
y2 = m1$e1$largest_eigenvec[2] * sqrt(m1$e1$largest_eigenval)
)
g <-
g + geom_segment(
aes(
x = x1,
y = y1,
xend = x1 + x2,
yend = y1 + y2
),
data = df,
arrow = arrow(length = unit(0.5, "cm"))
)
df <- data.frame(
x1 = m1$e1$X0,
x2 = m1$e1$smallest_eigenvec[1] * sqrt(m1$e1$smallest_eigenval),
y1 = m1$e1$Y0,
y2 = m1$e1$smallest_eigenvec[2] * sqrt(m1$e1$smallest_eigenval)
)
g <-
g + geom_segment(
aes(
x = x1,
y = y1,
xend = x1 + x2,
yend = y1 + y2
),
data = df,
arrow = arrow(length = unit(0.5, "cm"))
)
##
df <- data.frame(
x1 = m1$e2$X0,
x2 = m1$e2$largest_eigenvec[1] * sqrt(m1$e2$largest_eigenval),
y1 = m1$e2$Y0,
y2 = m1$e2$largest_eigenvec[2] * sqrt(m1$e2$largest_eigenval)
)
g <-
g + geom_segment(
aes(
x = x1,
y = y1,
xend = x1 + x2,
yend = y1 + y2
),
data = df,
arrow = arrow(length = unit(0.5, "cm"))
)
df <- data.frame(
x1 = m1$e2$X0,
x2 = m1$e2$smallest_eigenvec[1] * sqrt(m1$e2$smallest_eigenval),
y1 = m1$e2$Y0,
y2 = m1$e2$smallest_eigenvec[2] * sqrt(m1$e2$smallest_eigenval)
)
g <-
g + geom_segment(
aes(
x = x1,
y = y1,
xend = x1 + x2,
yend = y1 + y2
),
data = df,
arrow = arrow(length = unit(0.5, "cm"))
)
}
print(g)
# save figure
if (SaveFig == TRUE)
ggsave(
paste(figname, ".tiff", sep = ""),
width = 10,
height = 10,
dpi = 300,
device = "tiff"
)
}
m1 <- estimateGaussianModel (feat1 = 'wE3', feat2 = 'wE4', clinicalScale = 'Load')
summary(m1$xm) # Table 5
plotModel(m1, clinicalScale = 'Load', xl = c(-0.3, 0.3),yl = c(-0.3, 0.3),
SaveFig = TRUE,
figname = "./Figures/Figure8a",
plotEigenc = TRUE, feat1 = 'wE3', feat2 = 'wE4')
m2 <- estimateGaussianModel (feat1 = 'wE3', feat2 = 'wE4', clinicalScale = 'UPDRS_M_20_25')
summary(m2$xm) # Table 5
plotModel(m2, clinicalScale = 'UPDRS_M_20_25', xl = c(0.0, 1.0),yl = c(0.0, 1.0),
SaveFig = TRUE,figname = "./Figures/Figure8b",
plotEigenc = TRUE, feat1 = 'wE3', feat2 = 'wE4')
m3 <- estimateGaussianModel (feat1 = 'wE3', feat2 = 'wE4', clinicalScale = 'UPDRS_P_21')
summary(m3$xm) # Table 5
plotModel(m3, clinicalScale = 'UPDRS_P_21', xl = c(0.0, 1.0),yl = c(0.0, 1.0),
SaveFig = TRUE,figname = "./Figures/Figure8c",
plotEigenc = TRUE, feat1 = 'wE3', feat2 = 'wE4')
m4 <- estimateGaussianModel (feat1 = 'wE3', feat2 = 'wE4', clinicalScale = 'UPDRS_T_20')
summary(m4$xm) # Table 5
plotModel(m4, clinicalScale = 'UPDRS_T_20', xl = c(0.0, 1.0),yl = c(0.0, 1.0),
SaveFig = TRUE,figname = "./Figures/Figure8d",
plotEigenc = TRUE, feat1 = 'wE3', feat2 = 'wE4')
dfRes <- rbind.data.frame(m1$data, m2$data, m3$data, m4$data)
print(dfRes)
write.xlsx(dfRes, './Correlations/ClustRes.xlsx')
Excelfilename <- "./Correlations/ClustRes.xlsx"
D <- read.xlsx(Excelfilename,sheetName)
Excelfilename <- "./Correlations/ClustRes.xlsx"
D <- read.xlsx(Excelfilename)
View(D)
View(D)
D %>% group_by(SENSOR)
aa <- D %>% group_by(SENSOR)
View(aa)
aa <- D %>% group_by(SENSOR, Protocol)
View(aa)
D %>% group_by(SENSOR, Protocol)
D %>% group_by(SENSOR, Protocol) %>%
summarise(mpg = mean(Prob.Label.1)
)
Excelfilename <- "./Correlations/ClustRes.xlsx"
D <- read.xlsx(Excelfilename)
View(D)
aggdata2 <-aggregate(D, by=list(SENSOR,Protocol),
FUN=mean, na.rm=TRUE)
View(D)
by_cyl <- D %>% group_by(list(SENSOR,Protocol))
View(D)
View(D)
View(D)
D  %>%
filter(Protocol == "Repouso") %>%
select(SENSOR, Prob.Label.1, Prob.Label.2)
View(D)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(m = mean)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(m = mean(Prob.Label.1, na.rm = TRUE))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(m = mean(SENSOR, na.rm = TRUE))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
18*4
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(n())
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(mean())
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(mean)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
group_by(SENSOR, Prob.Label.1, Prob.Label.2)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
group_by(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(mean)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(mean)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(mean_size = mean(Prob.Label.1, na.rm = TRUE))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(mean())
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(mean)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
View(aa)
View(aa)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
View(aa)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR) %>%
summarize(SENSOR, mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR, add = TRUE)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR, add = TRUE) %>%
summarize(SENSOR, mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR, add = TRUE) %>%
summarize(mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
View(aa)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR, add = TRUE)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
summarize(mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)
View(aa)
aggregate(aa, by=list(SENSOR),
FUN=mean, na.rm=TRUE)
class(aa)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
?summarise
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(SENSOR)%>%
summarize(mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE)) %>%
group_vars()
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
#  group_by(SENSOR)%>%
summarize(mP1 = mean(Prob.Label.1, na.rm = TRUE), mP2 = mean(Prob.Label.2, na.rm = TRUE))
View(aa)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>% group_vars()
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>% group_vars()
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
?std
aggregate(aa, by=list(aa$SENSOR),
FUN=std)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
aggregate(aa, by=list(aa$SENSOR),
FUN=std)
aggregate(aa, by=list(aa$SENSOR),
FUN=std, flag=0)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
?stdev()
aggregate(aa, by=list(aa$SENSOR),
FUN=stdev)
aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
View(aa)
aggregate(aa, by=list(aa$SENSOR),
list (FUN=mean, na.rm=TRUE, FUN=sd))
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
factor(D$SENSOR)
D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)  %>%
group_by(factor(SENSOR))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
group_by(factor(SENSOR))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
group_by(b = factor(SENSOR))
D  %>%
filter(Protocol.Label == 2) %>% #Rest
group_by(b = factor(SENSOR))
select(b, Prob.Label.1, Prob.Label.2)
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
mRest <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
meanRest <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
meanRest
Pa1a2 <- meanRest$Prob.Label.1
Pa1a2
Pa2a2 <- meanRest$Prob.Label.2
Pa2a2
stdRest <-aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
stdRest
std22 <- stdRest$Prob.Label.2
std22
aa <- D  %>%
filter(Protocol.Label == 1) %>% #Postural
select(SENSOR, Prob.Label.1, Prob.Label.2)
meanPostural <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
meanPostural
aa <- D  %>%
filter(Protocol.Label == 1) %>% #Postural
select(SENSOR, Prob.Label.1, Prob.Label.2)
meanPostural <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
Pa1a1 <- meanPostural$Prob.Label.1
Pa2a1 <- meanPostural$Prob.Label.2
stdPostural <-aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
std11 <- stdPostural$Prob.Label.1
std21 <- stdPostural$Prob.Label.2
Pa1a1
std11
Pa2a1
std21
names(std21) <- factor(D$SENSOR)
factor(SENSOR)
factor(D$SENSOR)
levels(D$SENSOR)
names(std21) <- levels(D$SENSOR)
std21
std21
levels(D$SENSOR)
levels(D$SENSOR)
D$SENSOR
factor(D$SENSOR)
levels(factor(D$SENSOR))
names(std21) <- levels(factor(D$SENSOR))
std21
# Estimates for the rest protocol
aa <- D  %>%
filter(Protocol.Label == 2) %>% #Rest
select(SENSOR, Prob.Label.1, Prob.Label.2)
meanRest <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
Pa1a2 <- meanRest$Prob.Label.1
names(Pa1a2) <- levels(factor(D$SENSOR))
Pa2a2 <- meanRest$Prob.Label.2
names(Pa2a2) <- levels(factor(D$SENSOR))
stdRest <-aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
std12 <- stdRest$Prob.Label.1
names(std12) <- levels(factor(D$SENSOR))
std22 <- stdRest$Prob.Label.2
names(std22) <- levels(factor(D$SENSOR))
# Estimates for the postural protocol
aa <- D  %>%
filter(Protocol.Label == 1) %>% #Postural
select(SENSOR, Prob.Label.1, Prob.Label.2)
meanPostural <- aggregate(aa, by=list(aa$SENSOR),
FUN=mean, na.rm=TRUE)
Pa1a1 <- meanPostural$Prob.Label.1
names(Pa1a1) <- levels(factor(D$SENSOR))
Pa2a1 <- meanPostural$Prob.Label.2
names(Pa2a1) <- levels(factor(D$SENSOR))
stdPostural <-aggregate(aa, by=list(aa$SENSOR),
FUN=sd)
std11 <- stdPostural$Prob.Label.1
names(std11) <- levels(factor(D$SENSOR))
std21 <- stdPostural$Prob.Label.2
names(std21) <- levels(factor(D$SENSOR))
Pa1a1
df <- data.frame(Pa1a1, std11, Pa2a1, std21, Pa1a2, std12, Pa2a2, std22)
print(df)
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)
- sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2
- sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
(df$Pa1a1 + df$Pa2a2)/2
(df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2
df$std11^2
df$std12^2
df$std21^2
(df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4
sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
(df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2
- sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
(df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2
- sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2 - sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
QI
names(QI) <- levels(factor(D$SENSOR))
QI
sort(QI)
?sort
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2 - sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
names(QI) <- levels(factor(D$SENSOR))
QI <- sort(QI, decreasing = true)
print(QI)
sort(QI, decreasing = true)
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2 - sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
names(QI) <- levels(factor(D$SENSOR))
sort(QI, decreasing = true)
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2 - sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
names(QI) <- levels(factor(D$SENSOR))
QI <- sort(QI, decreasing = TRUE)
print(QI)
print(t(QI))
QI <- (df$Pa1a1 + df$Pa2a2)/2 - (df$Pa1a2 + df$Pa2a1)/2 - sqrt( (df$std11^2 + df$std12^2 + df$std21^2 + df$std22^2)/4 )
names(QI) <- levels(factor(D$SENSOR))
QI <- sort(QI, decreasing = TRUE)
print(QI)
print(QI)
